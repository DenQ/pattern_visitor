// Generated by CoffeeScript 1.9.3
(function() {
  var ElementA, ElementB, IElement, IVisitor, Visitor1, Visitor2, elements, i, item, len, visitor1, visitor2,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  IElement = (function() {
    function IElement() {}

    IElement.prototype.accept = function(visitor) {
      throw false;
    };

    return IElement;

  })();

  IVisitor = (function() {
    function IVisitor() {
      throw false;
    }

    IVisitor.prototype.visit = function(element) {
      throw false;
    };

    return IVisitor;

  })();

  ElementA = (function(superClass) {
    extend(ElementA, superClass);

    function ElementA() {
      return ElementA.__super__.constructor.apply(this, arguments);
    }

    ElementA.prototype.name = 'ElementA';

    ElementA.prototype.accept = function(visitor3) {
      this.visitor = visitor3;
      return this.visitor.visit(this);
    };

    return ElementA;

  })(IElement);

  ElementB = (function(superClass) {
    extend(ElementB, superClass);

    function ElementB() {
      return ElementB.__super__.constructor.apply(this, arguments);
    }

    ElementB.prototype.name = 'ElementB';

    ElementB.prototype.accept = function(visitor3) {
      this.visitor = visitor3;
      return this.visitor.visit(this);
    };

    return ElementB;

  })(IElement);

  Visitor1 = (function(superClass) {
    extend(Visitor1, superClass);

    function Visitor1() {}

    Visitor1.prototype.visit = function(element) {
      return console.log('visit 1 to ' + element.name);
    };

    return Visitor1;

  })(IVisitor);

  Visitor2 = (function(superClass) {
    extend(Visitor2, superClass);

    function Visitor2() {}

    Visitor2.prototype.visit = function(element) {
      return console.log('visit 2 to ' + element.name);
    };

    return Visitor2;

  })(IVisitor);


  /*
    context
   */

  visitor1 = new Visitor1();

  visitor2 = new Visitor2();

  elements = [new ElementA(), new ElementB()];

  for (i = 0, len = elements.length; i < len; i++) {
    item = elements[i];
    item.accept(visitor1);
    item.accept(visitor2);
  }

}).call(this);
